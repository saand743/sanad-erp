import React, { useState, useEffect } from 'react';
import toast from 'react-hot-toast';
import { logActivity } from '@/app/api/audit-log/service';
import { FaEdit, FaTrash, FaSearch } from 'react-icons/fa';

export default function JournalEntriesPage() {
  const [entries, setEntries] = useState([]);
  const [accounts, setAccounts] = useState([]);
  const [branches, setBranches] = useState([]);
  const [selectedBranch, setSelectedBranch] = useState('');
  const [loading, setLoading] = useState(true);
  const [form, setForm] = useState({
    entry_number: '',
    entry_date: '',
    description: '',
    created_by: '',
    lines: [],
    branch_id: '',
  });
  const [line, setLine] = useState({ account_id: '', description: '', debit: 0, credit: 0 });
  const [editEntryId, setEditEntryId] = useState(null);
  const [editForm, setEditForm] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchBranches();
  }, []);

  useEffect(() => {
    if (selectedBranch) {
      fetchEntries(selectedBranch);
      fetchAccounts(selectedBranch);
      setForm(f => ({ ...f, branch_id: selectedBranch }));
    }
  }, [selectedBranch]);

  const fetchBranches = async () => {
    try {
      const response = await fetch('/api/branches');
      const data = await response.json();
      if (data.success) {
        setBranches(data.branches);
        setSelectedBranch(data.branches[0]?.id || '');
        setForm(f => ({ ...f, branch_id: data.branches[0]?.id || '' }));
      }
    } catch (error) {
      toast.error('فشل في جلب الفروع');
    }
  };

  const fetchEntries = async (branchId) => {
    setLoading(true);
    try {
      const response = await fetch(`/api/journal-entries?branch_id=${branchId}`);
      const data = await response.json();
      if (data.success) {
        setEntries(data.entries);
      } else {
        toast.error(data.error || 'فشل في جلب القيود');
      }
    } catch (error) {
      toast.error('خطأ في الشبكة عند جلب القيود');
    } finally {
      setLoading(false);
    }
  };

  const fetchAccounts = async (branchId) => {
    try {
      const response = await fetch(`/api/accounts?branch_id=${branchId}`);
      const data = await response.json();
      if (data.success) {
        setAccounts(data.accounts);
      }
    } catch (error) {}
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleLineChange = (e) => {
    const { name, value } = e.target;
    setLine((prev) => ({ ...prev, [name]: value }));
  };

  const addLine = () => {
    setForm((prev) => ({ ...prev, lines: [...prev.lines, { ...line, debit: parseFloat(line.debit), credit: parseFloat(line.credit) }] }));
    setLine({ account_id: '', description: '', debit: 0, credit: 0 });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/journal-entries', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form),
      });
      const data = await response.json();
      if (data.success) {
        toast.success('تم إضافة القيد بنجاح');
        setForm({ entry_number: '', entry_date: '', description: '', created_by: '', lines: [], branch_id: selectedBranch });
        fetchEntries(selectedBranch);

        // تسجيل النشاط في سجل التدقيق
        await logActivity({
          user_id: 1, // استبدل بمعرف المستخدم الفعلي
          user_name: 'Admin', // استبدل باسم المستخدم الفعلي
          action: 'CREATE_JOURNAL_ENTRY',
          entity_type: 'JournalEntry',
          entity_id: data.entry.id,
          details: `تم إنشاء قيد يومية جديد: ${data.entry.entry_number}`
        });
      } else {
        toast.error(data.error || 'فشل في إضافة القيد');
      }
    } catch (error) {
      toast.error('خطأ في الشبكة عند إضافة القيد');
    }
  };

  const handleEditClick = (entry) => {
    setEditEntryId(entry.id);
    setEditForm({ ...entry });
  };

  const handleEditChange = (e) => {
    const { name, value } = e.target;
    setEditForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleEditSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch(`/api/journal-entries/${editEntryId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(editForm),
      });
      const data = await response.json();
      if (data.success) {
        toast.success('تم تعديل القيد بنجاح');
        setEditEntryId(null);
        setEditForm(null);
        fetchEntries(selectedBranch);
      } else {
        toast.error(data.error || 'فشل في تعديل القيد');
      }
    } catch (error) {
      toast.error('خطأ في الشبكة عند تعديل القيد');
    }
  };

  const handleDeleteClick = async (entryId) => {
    if (!window.confirm('هل أنت متأكد من حذف هذا القيد؟')) return;
    try {
      const response = await fetch(`/api/journal-entries/${entryId}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
      });
      const data = await response.json();
      if (data.success) {
        toast.success('تم حذف القيد بنجاح');
        fetchEntries(selectedBranch);
      } else {
        toast.error(data.error || 'فشل في حذف القيد');
      }
    } catch (error) {
      toast.error('خطأ في الشبكة عند حذف القيد');
    }
  };

  const filteredEntries = entries.filter(entry =>
    entry.entry_number?.toString().includes(searchTerm) ||
    entry.description?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold text-gray-900">قيود اليومية</h1>
      <div className="mb-4">
        <label className="block mb-1">اختر الفرع</label>
        <select value={selectedBranch} onChange={e => { setSelectedBranch(e.target.value); setForm(f => ({ ...f, branch_id: e.target.value })); }} className="border rounded px-3 py-2">
          {branches.map(branch => (
            <option key={branch.id} value={branch.id}>{branch.name}</option>
          ))}
        </select>
      </div>
      <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow p-6 mb-6 space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block mb-1">رقم القيد</label>
            <input name="entry_number" value={form.entry_number} onChange={handleChange} required className="border rounded px-3 py-2 w-full" />
          </div>
          <div>
            <label className="block mb-1">تاريخ القيد</label>
            <input name="entry_date" type="date" value={form.entry_date} onChange={handleChange} required className="border rounded px-3 py-2 w-full" />
          </div>
          <div className="md:col-span-2">
            <label className="block mb-1">الوصف</label>
            <input name="description" value={form.description} onChange={handleChange} className="border rounded px-3 py-2 w-full" />
          </div>
        </div>
        <div className="mt-4">
          <h2 className="font-bold mb-2">تفاصيل القيد</h2>
          <div className="grid grid-cols-1 md:grid-cols-5 gap-2 mb-2">
            <select name="account_id" value={line.account_id} onChange={handleLineChange} className="border rounded px-3 py-2">
              <option value="">اختر الحساب</option>
              {accounts.map(acc => (
                <option key={acc.id} value={acc.id}>{acc.name_ar} ({acc.code})</option>
              ))}
            </select>
            <input name="description" value={line.description} onChange={handleLineChange} placeholder="الوصف" className="border rounded px-3 py-2" />
            <input name="debit" type="number" value={line.debit} onChange={handleLineChange} placeholder="مدين" className="border rounded px-3 py-2" />
            <input name="credit" type="number" value={line.credit} onChange={handleLineChange} placeholder="دائن" className="border rounded px-3 py-2" />
            <button type="button" onClick={addLine} className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">إضافة</button>
          </div>
          <table className="min-w-full divide-y divide-gray-200 mt-2">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase">الحساب</th>
                <th className="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase">الوصف</th>
                <th className="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase">مدين</th>
                <th className="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase">دائن</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {form.lines.map((l, idx) => (
                <tr key={idx}>
                  <td className="px-4 py-2 text-sm text-gray-900">{accounts.find(a => a.id == l.account_id)?.name_ar || '-'}</td>
                  <td className="px-4 py-2 text-sm text-gray-500">{l.description}</td>
                  <td className="px-4 py-2 text-sm text-green-700 font-bold">{l.debit}</td>
                  <td className="px-4 py-2 text-sm text-red-700 font-bold">{l.credit}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 mt-4">إضافة القيد</button>
      </form>
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-xl font-bold mb-4">القيود المسجلة</h2>
        <div className="mb-4 flex gap-2 items-center">
          <FaSearch className="text-gray-400" />
          <input type="text" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder="بحث برقم القيد أو الوصف..." className="border rounded px-3 py-2" />
        </div>
        {loading ? (
          <div>جاري التحميل...</div>
        ) : (
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">رقم القيد</th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">التاريخ</th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">الوصف</th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">إجراءات</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredEntries.map(entry => (
                <tr key={entry.id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{entry.entry_number}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{new Date(entry.entry_date).toLocaleDateString('ar-SA')}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{entry.description}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                    <button onClick={() => handleEditClick(entry)} className="text-indigo-600 hover:text-indigo-800 mx-1" title="تعديل"><FaEdit /></button>
                    <button onClick={() => handleDeleteClick(entry.id)} className="text-red-600 hover:text-red-800 mx-1" title="حذف"><FaTrash /></button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
      {/* نموذج تعديل القيد */}
      {editEntryId && editForm && (
        <div className="bg-white rounded-lg shadow p-6 mt-6">
          <h2 className="text-xl font-bold mb-4">تعديل القيد</h2>
          <form onSubmit={handleEditSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block mb-1">رقم القيد</label>
                <input name="entry_number" value={editForm.entry_number} onChange={handleEditChange} required className="border rounded px-3 py-2 w-full" />
              </div>
              <div>
                <label className="block mb-1">التاريخ</label>
                <input name="entry_date" type="date" value={editForm.entry_date} onChange={handleEditChange} required className="border rounded px-3 py-2 w-full" />
              </div>
              <div className="md:col-span-2">
                <label className="block mb-1">الوصف</label>
                <input name="description" value={editForm.description} onChange={handleEditChange} className="border rounded px-3 py-2 w-full" />
              </div>
            </div>
            <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">حفظ التعديل</button>
            <button type="button" onClick={() => { setEditEntryId(null); setEditForm(null); }} className="bg-gray-200 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-300 ml-2">إلغاء</button>
          </form>
        </div>
      )}
    </div>
  );
}
