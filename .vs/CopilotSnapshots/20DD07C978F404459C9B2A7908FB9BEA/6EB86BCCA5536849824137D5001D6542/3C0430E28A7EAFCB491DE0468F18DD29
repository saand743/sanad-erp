# 🎯 نظام سند لإدارة الموارد (Sanad ERP System) - الإصدار 2.0

مرحباً بك في ملف التوثيق الرسمي لنظام سند لإدارة الموارد. هذا الملف هو مرجعك الأساسي لفهم المشروع، إعداده، وتشغيله.

---

## 📜 عن المشروع

نظام سند هو نظام تخطيط موارد مؤسسات (ERP) متكامل مبني باستخدام أحدث التقنيات (Next.js & PostgreSQL)، مصمم ليكون سريعاً، آمناً، وسهل الاستخدام. يهدف النظام إلى مساعدة الشركات الصغيرة والمتوسطة على إدارة عملياتها اليومية بكفاءة عالية.

---

## 📊 حالة المشروع الحالية

- **الواجهة الخلفية (Backend):** **مكتملة بنسبة 95%**. تم بناء جميع واجهات برمجة التطبيقات (API) للوحدات الأساسية وهي جاهزة للعمل وتتضمن آليات أمان متقدمة.
- **الواجهة الأمامية (Frontend):** **مكتملة بنسبة 40%**. تم تصميم الهيكل والصفحات، لكنها حالياً تستخدم **بيانات وهمية (Mock Data)** وليست متصلة بالواجهة الخلفية.

---

## ✨ الوحدات والميزات الأساسية

النظام يحتوي على مجموعة متكاملة من الوحدات التي تعمل معاً بسلاسة:

- **🔐 إدارة المستخدمين والصلاحيات:** نظام تسجيل دخول آمن مع إدارة كاملة للمستخدمين وصلاحياتهم.
- **📊 لوحة التحكم:** نظرة شاملة وفورية على أداء العمل مع إحصائيات ورسوم بيانية.
- **📦 إدارة المخزون:** تتبع دقيق للمنتجات، الكميات، وتنبيهات عند انخفاض المخزون.
- **💰 المبيعات والمشتريات:** إنشاء وإدارة الفواتير مع تحديث تلقائي للمخزون عبر معاملات قاعدة بيانات آمنة (Transactions).
- **👥 إدارة العملاء والموردين:** قاعدة بيانات مركزية للعملاء والموردين.
- **💵 الخزنة والمصروفات:** تتبع جميع الحركات المالية من مقبوضات ومدفوعات ومصروفات.
- **🖨️ طباعة الباركود:** أداة مدمجة لتصميم وطباعة بطاقات الباركود للمنتجات.

---

## 🛠️ التقنيات المستخدمة

- **إطار العمل (Framework):** Next.js 14 (React)
- **لغة البرمجة:** JavaScript
- **قاعدة البيانات:** PostgreSQL
- **التصميم:** Tailwind CSS
- **المصادقة:** JWT (JSON Web Tokens) & bcryptjs
- **مكتبات إضافية:** Recharts (للرسوم البيانية), React-Hot-Toast (للتنبيهات).

---

## 🚀 أوامر الإعداد والتشغيل

### 1. تثبيت الاعتماديات
افتح الطرفية (Terminal) في مجلد المشروع وقم بتشغيل الأمر:
```bash
npm install
```

### 2. إعداد ملف الأسرار
هذه هي أهم خطوة. قم بإنشاء ملف باسم `.env.local` في المجلد الرئيسي للمشروع، وقم بلصق المحتوى التالي بداخله:

```
# مفتاح تشفير التوكن (JWT)
JWT_SECRET=a9b8c7d6e5f4a3b2c1d0e9f8a7b6c5d4e3f2a1b0c9d8e7f6a5b4c3d2e1f0_SanadERP_!@#$

# رابط الاتصال بقاعدة بيانات PostgreSQL
POSTGRES_URL="ضع_رابط_قاعدة_البيانات_الخاص_بك_هنا"
```
**مهم جداً:** لا تنسَ استبدال `ضع_رابط_قاعدة_البيانات_الخاص_بك_هنا` برابط الاتصال الفعلي الخاص بقاعدة بياناتك.

### 3. تجهيز قاعدة البيانات
**(خطوة مطلوبة)** قبل تشغيل المشروع، يجب إنشاء الجداول اللازمة في قاعدة بياناتك. يمكنك استخدام ملف `schema.sql` المرفق في المشروع لتنفيذ هذه العملية بسهولة.

### 4. تشغيل خادم التطوير
أنت الآن جاهز لتشغيل المشروع. استخدم الأمر التالي:
```bash
npm run dev
```
بعد تشغيل الأمر، سيصبح النظام متاحاً على الرابط: `http://localhost:3000`

---

## 📁 هيكل المشروع

- **`src/app/`**: يحتوي على جميع صفحات الواجهة الأمامية. كل مجلد بداخله يمثل صفحة في النظام.
- **`src/app/api/`**: يحتوي على جميع ملفات الواجهة الخلفية. كل مجلد بداخله يمثل نقطة نهاية (Endpoint) للـ API.
- **`src/lib/`**: يحتوي على الملفات المساعدة، مثل `db.js` للاتصال بقاعدة البيانات.
- **`src/components/`**: يحتوي على المكونات القابلة لإعادة الاستخدام (مثل الأزرار، النماذج).
- **`public/`**: يحتوي على الملفات الثابتة مثل الصور والشعارات.

---

## 🤖 المهام المجدولة (Cron Jobs)

المشروع مهيأ لتشغيل مهام مجدولة عبر Vercel. ملف `vercel.json` يحتوي على مثال لمهمة مجدولة لحساب الإهلاك بشكل دوري.
`"path": "/api/cron/calculate-depreciation"`