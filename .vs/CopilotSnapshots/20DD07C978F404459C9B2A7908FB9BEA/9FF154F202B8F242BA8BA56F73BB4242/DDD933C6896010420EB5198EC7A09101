import { NextResponse } from 'next/server';
import { logActivity } from '../../audit-log/service';

// بيانات وهمية لمحاكاة قاعدة البيانات
let mockSuppliers = [
  { id: 1, supplier_code: 'SUP-001', name: 'شركة الإلكترونيات المتقدمة', phone: '0112345678', email: 'contact@advanced-electronics.com', address: '123 شارع الملك فهد، الرياض', credit_limit: 50000, discount_rate: 5, current_balance: 15200.50, balance_status: 'debtor', is_active: true, created_at: '2023-10-20T10:00:00Z', custom_fields: { registration_number: 'CR12345', industry_type: 'Electronics' }, deleted_at: null },
  { id: 2, supplier_code: 'SUP-002', name: 'مؤسسة المواد الغذائية', phone: '0123456789', email: 'sales@food-supplies.com', address: '456 شارع العليا، جدة', credit_limit: 20000, discount_rate: 0, current_balance: -5000.00, balance_status: 'creditor', is_active: true, created_at: '2023-09-15T14:30:00Z', custom_fields: {}, deleted_at: null },
  { id: 3, supplier_code: 'SUP-003', name: 'مجموعة الأثاث العصري', phone: '0134567890', email: 'info@modern-furniture.com', address: '789 طريق الملك عبدالله، الدمام', credit_limit: 100000, discount_rate: 10, current_balance: 0.00, balance_status: 'balanced', is_active: true, created_at: '2024-01-05T09:00:00Z', custom_fields: { established_year: 2010 }, deleted_at: null },
  { id: 4, supplier_code: 'SUP-004', name: 'تجار الملابس بالجملة', phone: '0145678901', email: 'orders@clothing-wholesale.com', address: '101 شارع الأمير سلطان، مكة', credit_limit: 30000, discount_rate: 7, current_balance: 25000.00, balance_status: 'debtor', is_active: false, created_at: '2023-11-22T11:45:00Z', custom_fields: {}, deleted_at: null },
  { id: 5, supplier_code: 'SUP-005', name: 'شركة الحلول التقنية', phone: '0156789012', email: 'support@tech-solutions.net', address: '212 واحة السيليكون، دبي', credit_limit: 75000, discount_rate: 3, current_balance: -1250.75, balance_status: 'creditor', is_active: true, created_at: '2024-02-10T16:20:00Z', custom_fields: { registration_number: 'CR67890' }, deleted_at: null },
];

// محاكاة جلب المستخدم الحالي وصلاحياته من الجلسة أو التوكن
async function getCurrentUser(request) {
  // في تطبيق حقيقي، ستقوم بفك تشفير توكن JWT أو قراءة بيانات الجلسة
  // لاختبار الصلاحيات، يمكنك تغيير قيمة permanent_delete إلى false
  return { 
    id: 1, 
    name: 'Admin User', 
    role: 'admin', // دور المدير
    permissions: {
      suppliers: {
        view: true,
        create: true,
        edit: true,
        delete: true, // صلاحية الأرشفة (الحذف المبدئي)
        restore: true, // صلاحية الاستعادة
        permanent_delete: true // صلاحية الحذف النهائي (للمدير فقط)
      }
    }
  }; 
}

export async function POST(request) {
  try {
    const body = await request.json();
    const { action } = body;
    const user = await getCurrentUser(request); // جلب المستخدم الحالي

    switch (action) {
      case 'list':
        return handleList(body);
      case 'create':
        return handleCreate(body, user);
      case 'update':
        return handleUpdate(body, user);
      case 'delete':
        return handleDelete(body, user); // تمرير المستخدم للتحقق من الصلاحية
      case 'list_archived':
        return handleListArchived(body);
      case 'restore':
        return handleRestore(body, user); // تمرير المستخدم للتحقق من الصلاحية
      case 'permanent_delete':
        return handlePermanentDelete(body, user); // تمرير المستخدم للتحقق من الصلاحية
      default:
        return NextResponse.json({ success: false, error: 'الإجراء غير معروف' }, { status: 400 });
    }
  } catch (error) {
    console.error('[API Suppliers Manage Error]', error);
    return NextResponse.json({ success: false, error: 'حدث خطأ في الخادم' }, { status: 500 });
  }
}

function handleList(body) {
  const { search = '', page = 1, limit = 10, sort_by = 'name', sort_order = 'ASC' } = body;
  
  let filteredSuppliers = mockSuppliers.filter(s => s.deleted_at === null);

  // البحث
  if (search) {
    const lowercasedSearch = search.toLowerCase();
    filteredSuppliers = filteredSuppliers.filter(s => 
      s.name.toLowerCase().includes(lowercasedSearch) ||
      s.supplier_code.toLowerCase().includes(lowercasedSearch) ||
      s.phone?.includes(lowercasedSearch)
    );
  }

  // الترتيب
  filteredSuppliers.sort((a, b) => {
    const valA = a[sort_by];
    const valB = b[sort_by];
    
    let comparison = 0;
    if (valA > valB) {
      comparison = 1;
    } else if (valA < valB) {
      comparison = -1;
    }
    return sort_order === 'DESC' ? comparison * -1 : comparison;
  });

  // الترقيم
  const totalRecords = filteredSuppliers.length;
  const total_pages = Math.ceil(totalRecords / limit);
  const startIndex = (page - 1) * limit;
  const endIndex = startIndex + limit;
  const paginatedSuppliers = filteredSuppliers.slice(startIndex, endIndex);

  return NextResponse.json({
    success: true,
    suppliers: paginatedSuppliers,
    pagination: {
      current_page: page,
      total_pages,
      total_records: totalRecords,
      limit,
      has_next: page < total_pages,
      has_previous: page > 1,
    },
  });
}

function handleListArchived(body) {
  const { search = '', page = 1, limit = 10, sort_by = 'name', sort_order = 'ASC' } = body;
  
  // Filter for only archived suppliers
  let filteredSuppliers = mockSuppliers.filter(s => s.deleted_at !== null);

  // البحث
  if (search) {
    const lowercasedSearch = search.toLowerCase();
    filteredSuppliers = filteredSuppliers.filter(s => 
      s.name.toLowerCase().includes(lowercasedSearch) ||
      s.supplier_code.toLowerCase().includes(lowercasedSearch) ||
      s.phone?.includes(lowercasedSearch)
    );
  }

  // الترتيب
  filteredSuppliers.sort((a, b) => {
    const valA = a[sort_by];
    const valB = b[sort_by];
    
    let comparison = 0;
    if (valA > valB) {
      comparison = 1;
    } else if (valA < valB) {
      comparison = -1;
    }
    return sort_order === 'DESC' ? comparison * -1 : comparison;
  });

  // الترقيم
  const totalRecords = filteredSuppliers.length;
  const total_pages = Math.ceil(totalRecords / limit);
  const startIndex = (page - 1) * limit;
  const endIndex = startIndex + limit;
  const paginatedSuppliers = filteredSuppliers.slice(startIndex, endIndex);

  return NextResponse.json({
    success: true,
    suppliers: paginatedSuppliers,
    pagination: { current_page: page, total_pages, total_records: totalRecords, limit, has_next: page < total_pages, has_previous: page > 1 },
  });
}

async function handleCreate(body, user) {
  const { name, phone, email, address, credit_limit = 0, discount_rate = 0, opening_balance = 0, custom_fields = {} } = body;
  if (!name) {
    return NextResponse.json({ success: false, error: 'اسم المورد مطلوب' }, { status: 400 });
  }

  const newId = mockSuppliers.length > 0 ? Math.max(...mockSuppliers.map(s => s.id)) + 1 : 1;
  const newSupplier = {
    id: newId,
    supplier_code: `SUP-${String(newId).padStart(3, '0')}`,
    name,
    phone,
    email,
    address,
    credit_limit,
    discount_rate,
    current_balance: opening_balance,
    balance_status: opening_balance > 0 ? 'debtor' : opening_balance < 0 ? 'creditor' : 'balanced',
    custom_fields,
    deleted_at: null,
    is_active: true,
    created_at: new Date().toISOString(),
  };

  mockSuppliers.push(newSupplier);

  await logActivity({
    user_id: user.id,
    user_name: user.name,
    action: 'CREATE_SUPPLIER',
    entity_type: 'Supplier',
    entity_id: newSupplier.id,
    details: `إنشاء مورد جديد: ${newSupplier.name}`
  });

  return NextResponse.json({ success: true, supplier: newSupplier, message: 'تمت إضافة المورد بنجاح' });
}

async function handleUpdate(body, user) {
  const { id, name, phone, email, address, credit_limit, discount_rate, is_active, custom_fields } = body;
  const supplierIndex = mockSuppliers.findIndex(s => s.id === id);

  if (supplierIndex === -1) {
    return NextResponse.json({ success: false, error: 'المورد غير موجود' }, { status: 404 });
  }

  const originalSupplier = mockSuppliers[supplierIndex];
  mockSuppliers[supplierIndex] = { 
    ...originalSupplier, 
    ...body,
    custom_fields: { ...originalSupplier.custom_fields, ...custom_fields }
  };

  await logActivity({
    user_id: user.id,
    user_name: user.name,
    action: 'UPDATE_SUPPLIER',
    entity_type: 'Supplier',
    entity_id: id,
    details: `تحديث بيانات المورد: ${mockSuppliers[supplierIndex].name}`
  });

  return NextResponse.json({ success: true, supplier: mockSuppliers[supplierIndex], message: 'تم تحديث بيانات المورد بنجاح' });
}

async function handleDelete(body, user) {
  const { id } = body;  

  if (user.permissions?.suppliers?.delete !== true) {
    return NextResponse.json({ success: false, error: 'غير مصرح لك بأرشفة الموردين.' }, { status: 403 });
  }

  const supplierIndex = mockSuppliers.findIndex(s => s.id === id);

  if (supplierIndex === -1) {
    return NextResponse.json({ success: false, error: 'المورد غير موجود' }, { status: 404 });
  }

  const supplier = mockSuppliers[supplierIndex];

  // محاكاة التحقق من وجود معاملات مرتبطة
  if (supplier.current_balance !== 0) {
    return NextResponse.json({ success: false, error: 'لا يمكن حذف المورد لوجود رصيد حالي. يرجى تسوية الحساب أولاً.' }, { status: 400 });
  }

  // تطبيق الحذف المبدئي
  mockSuppliers[supplierIndex].deleted_at = new Date().toISOString();
  mockSuppliers[supplierIndex].is_active = false;

  await logActivity({
    user_id: user.id,
    user_name: user.name,
    action: 'ARCHIVE_SUPPLIER',
    entity_type: 'Supplier',
    entity_id: supplier.id,
    details: `أرشفة المورد: ${supplier.name} (ID: ${supplier.id})`
  });

  return NextResponse.json({ success: true, message: 'تمت أرشفة المورد بنجاح' });
}

async function handleRestore(body, user) {
  const { id } = body;  

  if (user.permissions?.suppliers?.restore !== true) {
    return NextResponse.json({ success: false, error: 'غير مصرح لك باستعادة الموردين.' }, { status: 403 });
  }

  const supplierIndex = mockSuppliers.findIndex(s => s.id === id);

  if (supplierIndex === -1) {
    return NextResponse.json({ success: false, error: 'المورد غير موجود في الأرشيف' }, { status: 404 });
  }

  mockSuppliers[supplierIndex].deleted_at = null;
  mockSuppliers[supplierIndex].is_active = true;

  await logActivity({
    user_id: user.id,
    user_name: user.name,
    action: 'RESTORE_SUPPLIER',
    entity_type: 'Supplier',
    entity_id: id,
    details: `استعادة المورد: ${mockSuppliers[supplierIndex].name} (ID: ${id})`
  });

  return NextResponse.json({ success: true, message: 'تمت استعادة المورد بنجاح' });
}

async function handlePermanentDelete(body, user) {
  const { id } = body;

  if (user.permissions?.suppliers?.permanent_delete !== true) {
    return NextResponse.json({ success: false, error: 'غير مصرح لك. هذا الإجراء يتطلب صلاحية خاصة.' }, { status: 403 });
  }

  const supplierIndex = mockSuppliers.findIndex(s => s.id === id);

  if (supplierIndex === -1) {
    return NextResponse.json({ success: false, error: 'المورد غير موجود' }, { status: 404 });
  }

  // التأكد من أن المورد مؤرشف بالفعل قبل الحذف النهائي
  if (mockSuppliers[supplierIndex].deleted_at === null) {
      return NextResponse.json({ success: false, error: 'لا يمكن حذف مورد نشط بشكل نهائي. يجب أرشفته أولاً.' }, { status: 400 });
  }

  const supplierToDelete = mockSuppliers[supplierIndex];

  // تنفيذ الحذف النهائي
  mockSuppliers.splice(supplierIndex, 1);

  await logActivity({
    user_id: user.id,
    user_name: user.name,
    action: 'PERMANENT_DELETE_SUPPLIER',
    entity_type: 'Supplier',
    entity_id: supplierToDelete.id,
    details: `حذف نهائي للمورد: ${supplierToDelete.name} (ID: ${supplierToDelete.id})`
  });

  return NextResponse.json({ success: true, message: 'تم حذف المورد بشكل نهائي' });
}