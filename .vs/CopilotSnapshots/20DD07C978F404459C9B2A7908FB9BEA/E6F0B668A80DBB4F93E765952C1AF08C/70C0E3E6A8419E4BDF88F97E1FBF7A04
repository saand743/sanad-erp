'use client';
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Toaster, toast } from 'react-hot-toast';
import { useVirtualizer } from '@tanstack/react-virtual';

function MainComponent() {
  const [activeTab, setActiveTab] = useState('list');
  const [inventoryCounts, setInventoryCounts] = useState([]);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedCount, setSelectedCount] = useState(null);
  const [countItems, setCountItems] = useState([]);
  const [focusedRowIndex, setFocusedRowIndex] = useState(null);
  const itemInputRefs = useRef([]);
  const [barcodeSearch, setBarcodeSearch] = useState('');
  const [itemChanges, setItemChanges] = useState({});
  const parentRef = useRef(null);
  const [hasNextPage, setHasNextPage] = useState(true);
  const [isFetchingNextPage, setIsFetchingNextPage] = useState(false);
  const [completionReport, setCompletionReport] = useState(null);

  const [newCountForm, setNewCountForm] = useState({
    count_type: 'full',
    count_method: 'manual',
    branch_id: 1,
    user_id: 1,
    product_ids: [],
    notes: '',
  });

  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');

  // إعداد المحاكاة الافتراضية للجدول
  const rowVirtualizer = useVirtualizer({
    count: hasNextPage ? countItems.length + 1 : countItems.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 65, // تقدير ارتفاع الصف بالبكسل
    overscan: 5, // عدد العناصر الإضافية التي يتم رسمها خارج الشاشة
  });

  useEffect(() => {
    const virtualItems = rowVirtualizer.getVirtualItems();
    if (virtualItems.length === 0) return;

    const lastItem = virtualItems[virtualItems.length - 1];
    if (!lastItem) {
      return;
    }

    if (
      lastItem.index >= countItems.length - 1 &&
      hasNextPage &&
      !isFetchingNextPage
    ) {
      fetchCountItems(countItems.length);
    }
  }, [
    rowVirtualizer.getVirtualItems(),
    hasNextPage,
    isFetchingNextPage,
    countItems,
    fetchCountItems, // Added fetchCountItems to dependency array
  ]);

  useEffect(() => {
    loadInventoryCounts();
    loadProducts();
  }, []);

  useEffect(() => {
    // تعديل حجم مصفوفة المراجع كلما تغيرت عناصر الجرد
    itemInputRefs.current = itemInputRefs.current.slice(0, countItems.length);
  }, [countItems]);

  const loadInventoryCounts = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/inventory-audits');
      if (!response.ok) {
        throw new Error(`خطأ في تحميل عمليات الجرد: ${response.status}`);
      }
      const data = await response.json();
      setInventoryCounts(data.counts || []);
    } catch (error) {
      console.error(error);
      setError('فشل في تحميل عمليات الجرد');
    } finally {
      setLoading(false);
    }
  };

  const loadProducts = async () => {
    try {
      const response = await fetch('/api/products');
      if (!response.ok) {
        throw new Error(`خطأ في تحميل المنتجات: ${response.status}`);
      }
      const data = await response.json();
      setProducts(data.products || []);
    } catch (error) {
      console.error(error);
      setError('فشل في تحميل المنتجات');
    }
  };

  const createInventoryCount = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/inventory-audits', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newCountForm),
      });

      if (!response.ok) {
        throw new Error(`خطأ في إنشاء عملية الجرد: ${response.status}`);
      }

      const data = await response.json();
      if (data.success) {
        setInventoryCounts((prev) => [data.count, ...prev]);
        setNewCountForm({
          count_type: 'full',
          count_method: 'manual',
          branch_id: 1,
          user_id: 1,
          product_ids: [],
          notes: '',
        });
        setActiveTab('list');
        setError(null);
      } else {
        setError(data.error || 'فشل في إنشاء عملية الجرد');
      }
    } catch (error) {
      console.error(error);
      setError('فشل في إنشاء عملية الجرد');
    } finally {
      setLoading(false);
    }
  };

  const updateCountQuantities = async (auditId, updates) => {
    setLoading(true);
    try {
      const response = await fetch('/api/inventory-audits', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ auditId, updates }),
      });

      if (!response.ok) {
        throw new Error(`خطأ في تحديث الكميات: ${response.status}`);
      }

      const data = await response.json();
      if (data.success) {
        toast.success(data.message || 'تم حفظ التغييرات بنجاح.');
        setError(null);
      } else {
        setError(data.error || 'فشل في تحديث الكميات');
      }
    } catch (error) {
      console.error(error);
      setError('فشل في تحديث الكميات');
    } finally {
      setLoading(false);
    }
  };

  const completeInventoryCount = async (auditId) => {
    if (!window.confirm('هل أنت متأكد من إنهاء عملية الجرد؟ سيتم تحديث كميات المخزون بشكل دائم ولا يمكن التراجع عن هذا الإجراء.')) {
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('/api/inventory-audits', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ auditId }),
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || `خطأ في إنهاء عملية الجرد: ${response.status}`);
      }

      const data = await response.json();
      if (data.success) {
        toast.success(data.message);
        setCompletionReport(data.report); // Show the report modal
        loadInventoryCounts();
        setActiveTab('list');
        setSelectedCount(null);
        setCountItems([]);
      }
    } catch (error) {
      console.error(error);
      setError('فشل في إنهاء عملية الجرد');
    } finally {
      setLoading(false);
    }
  };

  const fetchCountItems = useCallback(async (cursor = 0) => {
    if (cursor === 0) {
      setLoading(true); // Show main loader only for the first page
    }
    setIsFetchingNextPage(true);
    try {
      const response = await fetch(`/api/inventory-audits/${selectedCount.id}/items?cursor=${cursor}`);
      if (!response.ok) {
        throw new Error(`خطأ في تحميل عناصر الجرد: ${response.status}`);
      }
      const data = await response.json();
      if (data.success) {
        const itemsWithStatus = (data.items || []).map(item => ({ ...item, status: 'idle' }));
        setCountItems(prev => (cursor === 0 ? itemsWithStatus : [...prev, ...itemsWithStatus]));
        setHasNextPage(data.nextCursor !== null);
      } else {
        throw new Error(data.message || 'فشل في تحميل الدفعة التالية');
      }
    } catch (error) {
      console.error(error);
      setError('فشل في تحميل عناصر الجرد');
    } finally {
      setIsFetchingNextPage(false);
      if (cursor === 0) {
        setLoading(false);
      }
    }
  }, [selectedCount]);

  const handleCountItemUpdate = (productId, field, value) => {
    setCountItems(prev =>
      prev.map(item =>
        item.product_id === productId ? { ...item, [field]: value } : item
      )
    );
    // تتبع أن هذا العنصر قد تغير
    setItemChanges(prev => ({ ...prev, [productId]: true }));
  };

  // دالة جديدة للحفظ التلقائي لعنصر واحد
  const handleItemAutoSave = async (productId) => {
    if (!itemChanges[productId]) return; // لا تحفظ إذا لم يتغير شيء

    const itemToSave = countItems.find(item => item.product_id === productId);
    if (!itemToSave) return;

    setCountItems(prev => prev.map(item =>
      item.product_id === productId ? { ...item, status: 'saving' } : item
    ));

    try {
      // Use the main update function, but with only one item
      const updatePayload = [{
        productId: itemToSave.product_id,
        countedQuantity: itemToSave.counted_quantity,
        reason: itemToSave.reason,
        notes: itemToSave.notes,
      }];
      await updateCountQuantities(selectedCount.id, updatePayload);
      // The updateCountQuantities function already handles success/error toasts
      const response = { ok: true, json: () => Promise.resolve({ success: true }) }; // Mock response
      });
      const data = await response.json();
      if (!response.ok || !data.success) {
        throw new Error(data.error || 'فشل حفظ العنصر');
      }

      setCountItems(prev => prev.map(item => item.product_id === productId ? { ...item, status: 'saved' } : item));
      setItemChanges(prev => { const newChanges = { ...prev }; delete newChanges[productId]; return newChanges; });

      setTimeout(() => { setCountItems(prev => prev.map(item => item.product_id === productId && item.status === 'saved' ? { ...item, status: 'idle' } : item)); }, 2000);
    } catch (error) {
      console.error('Auto-save error:', error);
      toast.error(`فشل حفظ المنتج: ${itemToSave.product_name}`);
      setCountItems(prev => prev.map(item => item.product_id === productId ? { ...item, status: 'error' } : item));
    }
  };

  // دالة جديدة للتعامل مع ضغطات لوحة المفاتيح في حقول الإدخال
  const handleInputKeyDown = (e, index) => {
    const { key } = e;
    const currentItem = countItems[index];

    if (key === 'ArrowDown' || key === 'Enter' || key === 'ArrowUp') {
      if (currentItem && itemChanges[currentItem.product_id]) {
        handleItemAutoSave(currentItem.product_id);
      }
    }

    if (key === 'ArrowDown' || key === 'Enter') {
      e.preventDefault();
      const nextInput = itemInputRefs.current[index + 1];
      if (nextInput) {
        nextInput.focus();
      }
    } else if (key === 'ArrowUp') {
      e.preventDefault();
      const prevInput = itemInputRefs.current[index - 1];
      if (prevInput) {
        prevInput.focus();
      }
    }
  };

  const saveCountUpdates = () => {
    const updates = countItems.map((item) => ({
      productId: item.product_id,
      countedQuantity: item.counted_quantity || 0,
      reason: item.reason || '',
      notes: item.notes || '',
    }));

    updateCountQuantities(selectedCount.id, updates, true);
  };

  // دالة جديدة لتشغيل صوت "بيب" باستخدام Web Audio API
  const playBeep = () => {
    try {
      const AudioContext = window.AudioContext || window.webkitAudioContext;
      if (AudioContext) {
        const audioCtx = new AudioContext();
        const oscillator = audioCtx.createOscillator();
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(880, audioCtx.currentTime); // نغمة عالية
        const gainNode = audioCtx.createGain();
        gainNode.gain.setValueAtTime(0.5, audioCtx.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.1);
        oscillator.connect(gainNode);
        gainNode.connect(audioCtx.destination);
        oscillator.start();
        oscillator.stop(audioCtx.currentTime + 0.1);
      }
    } catch (error) {
      console.error("Failed to play beep sound:", error);
    }
  };

  // دالة جديدة لتشغيل صوت خطأ باستخدام Web Audio API
  const playErrorBeep = () => {
    try {
      const AudioContext = window.AudioContext || window.webkitAudioContext;
      if (AudioContext) {
        const audioCtx = new AudioContext();
        const oscillator = audioCtx.createOscillator();
        oscillator.type = 'square'; // نغمة أكثر حدة للخطأ
        oscillator.frequency.setValueAtTime(220, audioCtx.currentTime); // نغمة منخفضة
        const gainNode = audioCtx.createGain();
        gainNode.gain.setValueAtTime(0.3, audioCtx.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.2);
        oscillator.connect(gainNode);
        gainNode.connect(audioCtx.destination);
        oscillator.start();
        oscillator.stop(audioCtx.currentTime + 0.2);
      }
    } catch (error) {
      console.error("Failed to play error beep sound:", error);
    }
  };

  // دالة جديدة للبحث بالباركود
  const handleBarcodeSearch = (e) => {
    if (e.key === 'Enter' && barcodeSearch.trim() !== '') {
      e.preventDefault();
      const searchTerm = barcodeSearch.trim();
      const itemIndex = countItems.findIndex(
        (item) => item.product_code === searchTerm,
      );

      if (itemIndex !== -1) {
        toast.loading('جاري الانتقال للمنتج...', { id: 'scroll-toast' });
        rowVirtualizer.scrollToIndex(itemIndex, { align: 'center', behavior: 'smooth' });
        setTimeout(() => {
            toast.dismiss('scroll-toast');
        }, 1000);
      }

      if (itemIndex !== -1) {
        playBeep(); // تشغيل الصوت عند النجاح
        const inputRef = itemInputRefs.current[itemIndex];
        if (inputRef) {
          inputRef.scrollIntoView({ behavior: 'smooth', block: 'center' });
          inputRef.focus();
          toast.success(`تم العثور على: ${countItems[itemIndex].product_name}`);
        }
      } else {
        playErrorBeep(); // تشغيل صوت الخطأ عند الفشل
        toast.error('الباركود غير موجود في قائمة الجرد هذه.');
      }
      setBarcodeSearch('');
    }
  };

  const filteredCounts = inventoryCounts.filter((count) => {
    const matchesSearch =
      count.count_number?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      count.notes?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus =
      filterStatus === 'all' || count.status === filterStatus;
    return matchesSearch && matchesStatus;
  });

  const getStatusColor = (status) => {
    switch (status) {
      case 'draft':
        return 'bg-gray-100 text-gray-800';
      case 'in_progress':
        return 'bg-blue-100 text-blue-800';
      case 'completed':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'draft':
        return 'مسودة';
      case 'in_progress':
        return 'قيد التنفيذ';
      case 'completed':
        return 'مكتمل';
      default:
        return status;
    }
  };

  const getCountTypeText = (type) => {
    switch (type) {
      case 'full':
        return 'جرد كامل';
      case 'partial':
        return 'جرد جزئي';
      case 'cycle':
        return 'جرد دوري';
      default:
        return type;
    }
  };

  const getCountMethodText = (method) => {
    switch (method) {
      case 'automatic':
        return 'تلقائي';
      case 'manual':
        return 'يدوي';
      default:
        return method;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 font-cairo">
      <Toaster position="bottom-center" />
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">
                  نظام الجرد المتقدم
                </h1>
                <p className="mt-2 text-gray-600">
                  إدارة شاملة لعمليات الجرد والمخزون
                </p>
              </div>
              <div className="flex items-center space-x-4 space-x-reverse">
                <i className="fas fa-boxes text-4xl text-blue-500"></i>
              </div>
            </div>
          </div>
        </div>
      </div>

      {error && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex">
              <i className="fas fa-exclamation-circle text-red-400 ml-3 mt-0.5"></i>
              <div className="text-red-700">{error}</div>
            </div>
          </div>
        </div>
      )}

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-6">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8 space-x-reverse">
              <button
                onClick={() => setActiveTab('list')}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'list'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <i className="fas fa-list ml-2"></i>
                قائمة عمليات الجرد
              </button>
              <button
                onClick={() => setActiveTab('create')}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'create'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <i className="fas fa-plus ml-2"></i>
                إنشاء عملية جرد
              </button>
              {selectedCount && (
                <button
                  onClick={() => setActiveTab('update')}
                  className={`py-2 px-1 border-b-2 font-medium text-sm ${
                    activeTab === 'update'
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <i className="fas fa-edit ml-2"></i>
                  تحديث الكميات
                </button>
              )}
            </nav>
          </div>
        </div>

        {activeTab === 'list' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <div className="flex flex-col md:flex-row gap-4 items-start md:items-center justify-between mb-6">
                <div className="relative flex-1 max-w-md">
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <i className="fas fa-search text-gray-400"></i>
                  </div>
                  <input
                    type="text"
                    placeholder="البحث في عمليات الجرد..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="block w-full pr-10 pl-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                <div className="flex gap-2">
                  <select
                    value={filterStatus}
                    onChange={(e) => setFilterStatus(e.target.value)}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="all">جميع الحالات</option>
                    <option value="draft">مسودة</option>
                    <option value="in_progress">قيد التنفيذ</option>
                    <option value="completed">مكتمل</option>
                  </select>

                  <button
                    onClick={loadInventoryCounts}
                    disabled={loading}
                    className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50"
                  >
                    <i className="fas fa-sync-alt ml-2"></i>
                    تحديث
                  </button>
                </div>
              </div>

              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        رقم الجرد
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        النوع
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        الطريقة
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        الحالة
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        تاريخ الإنشاء
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        الإجراءات
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredCounts.map((count) => (
                      <tr key={count.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {count.count_number}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {getCountTypeText(count.count_type)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {getCountMethodText(count.count_method)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span
                            className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(
                              count.status,
                            )}`}
                          >
                            {getStatusText(count.status)}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {new Date(count.created_at).toLocaleDateString(
                            'ar-SA',
                          )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <div className="flex space-x-2 space-x-reverse">
                            {count.status !== 'completed' && (
                              <button
                                onClick={() => {
                                  setCountItems([]); // Reset items
                                  setHasNextPage(true); // Reset pagination state
                                  setSelectedCount(count);
                                  fetchCountItems(0); // Fetch first page
                                  setActiveTab('update');
                                }}
                                className="text-blue-600 hover:text-blue-900"
                              >
                                <i className="fas fa-edit ml-1"></i>
                                تحديث
                              </button>
                            )}
                            {count.status === 'in_progress' && (
                              <button
                                onClick={() => completeInventoryCount(count.id)}
                                className="text-green-600 hover:text-green-900"
                                disabled={loading}
                              >
                                <i className="fas fa-check ml-1"></i>
                                إنهاء
                              </button>
                            )}
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              {filteredCounts.length === 0 && (
                <div className="text-center py-12">
                  <i className="fas fa-boxes text-gray-400 text-4xl mb-4"></i>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    لا توجد عمليات جرد
                  </h3>
                  <p className="text-gray-600">ابدأ بإنشاء عملية جرد جديدة</p>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'create' && (
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <h2 className="text-xl font-bold text-gray-900 mb-6">
              إنشاء عملية جرد جديدة
            </h2>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  نوع الجرد
                </label>
                <select
                  value={newCountForm.count_type}
                  onChange={(e) =>
                    setNewCountForm((prev) => ({
                      ...prev,
                      count_type: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="full">جرد كامل</option>
                  <option value="partial">جرد جزئي</option>
                  <option value="cycle">جرد دوري</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  طريقة الجرد
                </label>
                <select
                  value={newCountForm.count_method}
                  onChange={(e) =>
                    setNewCountForm((prev) => ({
                      ...prev,
                      count_method: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="manual">يدوي</option>
                  <option value="automatic">تلقائي</option>
                </select>
              </div>

              {newCountForm.count_type === 'partial' && (
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    المنتجات المحددة
                  </label>
                  <select
                    multiple
                    value={newCountForm.product_ids}
                    onChange={(e) => {
                      const selectedIds = Array.from(
                        e.target.selectedOptions,
                        (option) => parseInt(option.value),
                      );
                      setNewCountForm((prev) => ({
                        ...prev,
                        product_ids: selectedIds,
                      }));
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 h-32"
                  >
                    {products.map((product) => (
                      <option key={product.id} value={product.id}>
                        {product.name} - {product.product_code}
                      </option>
                    ))}
                  </select>
                  <p className="text-sm text-gray-500 mt-1">
                    اضغط Ctrl أو Cmd لتحديد عدة منتجات
                  </p>
                </div>
              )}

              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ملاحظات
                </label>
                <textarea
                  value={newCountForm.notes}
                  onChange={(e) =>
                    setNewCountForm((prev) => ({
                      ...prev,
                      notes: e.target.value,
                    }))
                  }
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="أدخل أي ملاحظات إضافية..."
                />
              </div>
            </div>

            <div className="flex justify-end mt-6">
              <button
                onClick={createInventoryCount}
                disabled={loading}
                className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50"
              >
                {loading ? (
                  <>
                    <i className="fas fa-spinner fa-spin ml-2"></i>
                    جاري الإنشاء...
                  </>
                ) : (
                  <>
                    <i className="fas fa-plus ml-2"></i>
                    إنشاء عملية الجرد
                  </>
                )}
              </button>
            </div>
          </div>
        )}

        {activeTab === 'update' && selectedCount && (
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h2 className="text-xl font-bold text-gray-900">
                  تحديث كميات الجرد - {selectedCount.count_number}
                </h2>
                <p className="text-gray-600">
                  {getCountTypeText(selectedCount.count_type)} -{' '}
                  {getCountMethodText(selectedCount.count_method)}
                </p>
              </div>
              <div className="flex space-x-2 space-x-reverse">
                <button
                  onClick={saveCountUpdates}
                  disabled={loading}
                  className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50"
                >
                  <i className="fas fa-save ml-2"></i>
                  حفظ التحديثات
                </button>
                {selectedCount.status === 'in_progress' && (
                  <button
                    onClick={() => completeInventoryCount(selectedCount.id)}
                    disabled={loading}
                    className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:opacity-50"
                  >
                    <i className="fas fa-check ml-2"></i>
                    إنهاء الجرد
                  </button>
                )}
              </div>
            </div>

            <div className="mb-6 border-t pt-6">
              <label
                htmlFor="barcode-search"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                <i className="fas fa-barcode ml-2"></i>
                البحث السريع بالباركود
              </label>
              <input
                id="barcode-search"
                type="text"
                value={barcodeSearch}
                onChange={(e) => setBarcodeSearch(e.target.value)}
                onKeyDown={handleBarcodeSearch}
                placeholder="امسح الباركود أو أدخله واضغط Enter"
                className="w-full md:w-1/2 lg:w-1/3 pr-3 pl-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div ref={parentRef} className="overflow-auto border rounded-lg" style={{ height: '600px' }}>
              <table className="min-w-full relative">
                <thead className="bg-gray-50 sticky top-0 z-10">
                  <tr>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      المنتج
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      الكمية بالنظام
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      الكمية المجردة
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      الفرق
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      السبب
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      ملاحظات
                    </th>
                    <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                      الحالة
                    </th>
                  </tr>
                </thead>
                <tbody style={{ height: `${rowVirtualizer.getTotalSize()}px`, width: '100%', position: 'relative' }}>
                  {rowVirtualizer.getVirtualItems().map((virtualItem) => {
                    const item = countItems[virtualItem.index];
                    const isLoaderRow = virtualItem.index > countItems.length - 1;

                    if (isLoaderRow) {
                      return (
                        <tr key="loader" className="flex items-center justify-center p-4" style={{ height: `${virtualItem.size}px`, transform: `translateY(${virtualItem.start}px)` }}>
                          <td colSpan={7} className="text-center"><i className="fas fa-spinner fa-spin text-blue-500 mr-2"></i> جاري تحميل المزيد...</td>
                        </tr>
                      );
                    }

                    const index = virtualItem.index;
                    const difference = (item.counted_quantity || 0) - (item.system_quantity || 0);
                    return (
                      <tr
                        key={item.product_id}
                        ref={rowVirtualizer.measureElement}
                        data-index={virtualItem.index}
                        style={{
                          position: 'absolute',
                          top: 0,
                          left: 0,
                          width: '100%',
                          transform: `translateY(${virtualItem.start}px)`,
                        }}
                        className={`flex items-center transition-colors ${focusedRowIndex === index ? 'bg-blue-50' : 'bg-white'} hover:bg-gray-50`}
                      >
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 w-1/4">
                          {item.product_name}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 font-mono w-1/6">
                          {item.system_quantity || 0}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap w-1/6">
                          <input
                            type="number"
                            value={item.counted_quantity || ''}
                            onChange={(e) => handleCountItemUpdate(item.product_id, 'counted_quantity', parseFloat(e.target.value) || 0)}
                            onBlur={() => handleItemAutoSave(item.product_id)}
                            onKeyDown={(e) => handleInputKeyDown(e, index)}
                            onFocus={(e) => { e.target.select(); setFocusedRowIndex(index); }}
                            ref={(el) => (itemInputRefs.current[index] = el)}
                            className="w-24 text-center px-2 py-1 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            min="0"
                            step="0.01"
                          />
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-mono w-1/6">
                          <span className={`font-medium ${difference > 0 ? 'text-green-600' : difference < 0 ? 'text-red-600' : 'text-gray-500'}`}>
                            {difference > 0 ? '+' : ''}{difference.toFixed(2)}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap w-1/6">
                          <select
                            value={item.reason || ''}
                            onChange={(e) => handleCountItemUpdate(item.product_id, 'reason', e.target.value)}
                            onBlur={() => handleItemAutoSave(item.product_id)}
                            className="w-36 px-2 py-1 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          >
                            <option value="">اختر السبب</option>
                            <option value="تالف">تالف</option>
                            <option value="مفقود">مفقود</option>
                            <option value="خطأ في النظام">خطأ في النظام</option>
                            <option value="أخرى">أخرى</option>
                          </select>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap w-1/4">
                          <input
                            type="text"
                            value={item.notes || ''}
                            onChange={(e) => handleCountItemUpdate(item.product_id, 'notes', e.target.value)}
                            onBlur={() => handleItemAutoSave(item.product_id)}
                            className="w-40 px-2 py-1 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="ملاحظات"
                          />
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-center w-1/12">
                          <div className="w-6 h-6 flex items-center justify-center">
                            {item.status === 'saving' && <i className="fas fa-spinner fa-spin text-blue-500" title="جاري الحفظ..."></i>}
                            {item.status === 'saved' && <i className="fas fa-check-circle text-green-500" title="تم الحفظ"></i>}
                            {item.status === 'error' && (
                              <button onClick={() => handleItemAutoSave(item.product_id)} title="فشل الحفظ، اضغط لإعادة المحاولة">
                                <i className="fas fa-exclamation-circle text-red-500"></i>
                              </button>
                            )}
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>

            {countItems.length === 0 && (
              <div className="text-center py-12">
                <i className="fas fa-box-open text-gray-400 text-4xl mb-4"></i>
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  لا توجد عناصر للجرد
                </h3>
                <p className="text-gray-600">
                  لم يتم العثور على منتجات في هذه العملية
                </p>
              </div>
            )}
          </div>
        )}

        {completionReport && (
          <CompletionReportModal
            report={completionReport}
            onClose={() => setCompletionReport(null)}
          />
        )}
      </div>
    </div>
  );
}

function CompletionReportModal({ report, onClose }) {
  const printReport = () => {
    const printContent = document.getElementById('report-content').innerHTML;
    const originalContent = document.body.innerHTML;
    const styles = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;700&display=swap');
        body { font-family: 'Cairo', sans-serif; direction: rtl; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }
        th { background-color: #f2f2f2; }
        h3, h4 { color: #333; }
        .print-header { text-align: center; margin-bottom: 20px; }
      </style>
    `;
    document.body.innerHTML = `${styles}<div class="font-cairo">${printContent}</div>`;
    window.print();
    document.body.innerHTML = originalContent;
    window.location.reload(); // To re-attach React event handlers
  };

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] flex flex-col">
        <div className="p-6 border-b flex justify-between items-center">
          <h3 className="text-xl font-bold text-gray-900">
            <i className="fas fa-file-alt ml-2 text-blue-600"></i>
            تقرير إنهاء الجرد - {report.countId}
          </h3>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <i className="fas fa-times text-xl"></i>
          </button>
        </div>

        <div id="report-content" className="p-6 overflow-y-auto">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
            <div className="bg-blue-50 p-4 rounded-lg text-center">
              <p className="text-sm text-blue-600">تاريخ الإنهاء</p>
              <p className="text-lg font-bold text-blue-900">
                {new Date(report.completedAt).toLocaleString('ar-SA')}
              </p>
            </div>
            <div className="bg-yellow-50 p-4 rounded-lg text-center">
              <p className="text-sm text-yellow-600">عدد التسويات</p>
              <p className="text-lg font-bold text-yellow-900">
                {report.adjustments.length}
              </p>
            </div>
            <div className={`p-4 rounded-lg text-center ${report.totalAdjustmentValue >= 0 ? 'bg-green-50' : 'bg-red-50'}`}>
              <p className={`text-sm font-medium ${report.totalAdjustmentValue >= 0 ? 'text-green-600' : 'text-red-600'}`}>قيمة التسوية الإجمالية</p>
              <p className={`text-lg font-bold ${report.totalAdjustmentValue >= 0 ? 'text-green-900' : 'text-red-900'}`}>
                {report.totalAdjustmentValue.toLocaleString('ar-SA')} ر.س
              </p>
            </div>
          </div>

          {report.adjustments.length > 0 ? (
            <div>
              <h4 className="font-semibold text-gray-800 mb-4">تفاصيل الفروقات والتسويات:</h4>
              <div className="overflow-x-auto border rounded-lg">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-100">
                    <tr>
                      <th className="px-4 py-2 text-right text-sm font-medium text-gray-600">المنتج</th>
                      <th className="px-4 py-2 text-right text-sm font-medium text-gray-600">كمية النظام</th>
                      <th className="px-4 py-2 text-right text-sm font-medium text-gray-600">الكمية الفعلية</th>
                      <th className="px-4 py-2 text-right text-sm font-medium text-gray-600">الفرق</th>
                      <th className="px-4 py-2 text-right text-sm font-medium text-gray-600">قيمة الفرق</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {report.adjustments.map(adj => (
                      <tr key={adj.productId}>
                        <td className="px-4 py-3 text-sm text-gray-800">{adj.productName}</td>
                        <td className="px-4 py-3 text-sm text-gray-500">{adj.systemQuantity}</td>
                        <td className="px-4 py-3 text-sm text-gray-800 font-medium">{adj.countedQuantity}</td>
                        <td className={`px-4 py-3 text-sm font-bold ${adj.difference > 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {adj.difference > 0 ? '+' : ''}{adj.difference}
                        </td>
                        <td className={`px-4 py-3 text-sm font-bold ${adj.value > 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {adj.value.toLocaleString('ar-SA')} ر.س
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          ) : (
            <div className="text-center py-8 bg-green-50 rounded-lg">
              <i className="fas fa-check-circle text-green-500 text-4xl mb-3"></i>
              <p className="font-semibold text-green-800">لا توجد فروقات في هذه العملية. تم إنهاء الجرد بنجاح.</p>
            </div>
          )}
        </div>

        <div className="p-4 bg-gray-50 border-t flex justify-end space-x-3 space-x-reverse">
          <button onClick={printReport} className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
            <i className="fas fa-print ml-2"></i>
            طباعة التقرير
          </button>
          <button onClick={onClose} className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300">
            إغلاق
          </button>
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
