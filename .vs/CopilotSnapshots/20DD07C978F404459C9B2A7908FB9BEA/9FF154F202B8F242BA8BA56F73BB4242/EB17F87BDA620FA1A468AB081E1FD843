import { NextResponse } from 'next/server';
import { withAuth } from '@/lib/authMiddleware';
import { db } from '@/lib/db';

/**
 * @description جلب قائمة الموردين
 * @permission suppliers.view
 */
async function getSuppliers(request) {
    try {
        const { searchParams } = new URL(request.url);
        const all = searchParams.get('all') === 'true';

        // إذا كان الطلب لقائمة منسدلة، أرجع بيانات مبسطة
        if (all) {
            // بيانات وهمية مؤقتاً. لاحقاً سيتم جلبها من قاعدة البيانات
            const mockSuppliers = [
                { id: 1, name: 'المورد الأول' },
                { id: 2, name: 'المورد الثاني' },
                { id: 3, name: 'شركة التوريدات الحديثة' },
            ];
            return NextResponse.json({ success: true, suppliers: mockSuppliers });
        }

        // منطق افتراضي لعرض قائمة الموردين الكاملة مع ترقيم الصفحات
        const mockSuppliersList = [
            { id: 1, name: 'المورد الأول', phone: '123-456-7890', email: 'supplier1@example.com', status: 'active' },
            { id: 2, name: 'المورد الثاني', phone: '098-765-4321', email: 'supplier2@example.com', status: 'active' },
            { id: 3, name: 'شركة التوريدات الحديثة', phone: '555-555-5555', email: 'modern@example.com', status: 'inactive' },
        ];

        return NextResponse.json({ success: true, suppliers: mockSuppliersList, pagination: { total_count: 3, total_pages: 1, current_page: 1 } });
    } catch (error) {
        console.error('API_SUPPLIERS_GET_ERROR:', error);
        return NextResponse.json({ success: false, error: 'حدث خطأ أثناء جلب الموردين.' }, { status: 500 });
    }
}

/**
 * @description إنشاء مورد جديد
 * @permission suppliers.create
 */
async function createSupplier(request) {
    try {
        const body = await request.json();
        console.log("إنشاء مورد بالبيانات:", body);
        // استجابة وهمية
        const newSupplier = { id: Math.floor(Math.random() * 1000), ...body };
        return NextResponse.json({ success: true, message: "تم إنشاء المورد بنجاح.", supplier: newSupplier }, { status: 201 });
    } catch (error) {
        console.error('API_SUPPLIERS_POST_ERROR:', error);
        return NextResponse.json({ success: false, error: 'حدث خطأ أثناء إنشاء المورد.' }, { status: 500 });
    }
}

/**
 * @description حذف مورد
 * @permission suppliers.delete
 */
async function deleteSupplier(request) {
    try {
        const body = await request.json();
        console.log("حذف مورد بالمعرف:", body.id);
        // استجابة وهمية
        return NextResponse.json({ success: true, message: "تم حذف المورد بنجاح." });
    } catch (error) {
        console.error('API_SUPPLIERS_DELETE_ERROR:', error);
        return NextResponse.json({ success: false, error: 'حدث خطأ أثناء حذف المورد.' }, { status: 500 });
    }
}

export const GET = withAuth(getSuppliers, 'suppliers.view');
export const POST = withAuth(createSupplier, 'suppliers.create');
export const DELETE = withAuth(deleteSupplier, 'suppliers.delete');